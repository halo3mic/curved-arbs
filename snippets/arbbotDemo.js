const providers = require('../src/providers')
const instrMng = require('../src/instrMng')
const arbbot = require('../src/arbbot')
const config = require('../src/config')
const utils = require('../src/utils')
const ethers = require('ethers')

const { provider, signer } = providers.ws

async function fetchPoolData() {
    await arbbot.init(provider, signer)
    let poolData = await arbbot.fetchPoolData()
    console.log(poolData)
}

async function approveForAll(provider, signer, spenderTknsMap) {
    for (let spender of Object.keys(spenderTknsMap)) {
        await utils.approveERC20ForDispatcher(
            provider, 
            signer, 
            spender, 
            spenderTknsMap[spender]
        )
    }
    return true
}

async function getOptimalInAmount() {
    let path = instrMng.paths[1]
    let forkBlock = 11907345
    let gp = utils.getForkProvider(forkBlock)
    await arbbot.init(gp)
    let { amountIn, profit } = arbbot.optimalAmountForPath(path)
    console.log('Optimal amount in: ', amountIn)
    console.log('Optimal profit: ', profit)
}

async function handleUpdate() {
    let forkBlock = 11907345
    let gp = utils.getForkProvider(forkBlock)
    let gSigner = gp.getSigner(signer.address)
    arbbot.init(gp, gSigner)
    arbbot.handleUpdate(forkBlock)
}

async function simulateTxWithoutQuery() {
    let client = '0xa2cD5b9D50d19fDFd2F37CbaE0e880F9ce327837'
    let maintanance = '0x103c7BEC38a948b738A430B2b685654dd95bE0A5'
    let tknsToApproveForSpenders = {
        '0xCB859eA579b28e02B87A1FDE08d087ab9dbE5149': [
            '0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48'
        ]
    }
    let txPayload = {
        data: '0x416502790000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000002396fd17b7110a00000000000000000000000000000000000000000000000000000000000000002907a250d5630b4cf539739df2c5dacb4c659f2488d00000000000000000000000000000000000000000000000000000000000000e47ff36ab500000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000080000000000000000000000000d30ce37a6f2424593dabe9b712d235781815445d000000000000000000000000000000000000000000000000000000006061a7d00000000000000000000000000000000000000000000000000000000000000002000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2000000000000000000000000a0b86991c6218b36c1d19d4a2e9eb0ce3606eb48a356867fdcea8e71aeaf87805808803806231fdc00000000000000000000000000000000000000000000000000000000000001440dd4ebd9000000000000000000000000a0b86991c6218b36c1d19d4a2e9eb0ce3606eb48000000000000000000000000eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee0000000000000000000000000000000000000000000000000000000fce9239ae0000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000006061a7d0000000000000000000000000000000000000000000000000000000000000000100000000000000000000000075c23271661d9d143dcb617222bc4bec783eff3400000000000000000000000000000000',
        to: '0xD30Ce37a6F2424593DaBe9b712d235781815445D',
        gasPrice: '0x2e90edd000',
        from: client
      }
    let forkBlock = 11907345
    let unlocked_accounts = [client, maintanance]
    let gp = utils.getForkProvider(forkBlock, {unlocked_accounts})
    let trader = gp.getSigner(client)
    let approver = gp.getSigner(maintanance)
    try {
        console.log('Balance before:', await gp.getBalance(config.DISPATCHER).then(ethers.utils.formatEther))
        await approveForAll(gp, approver, tknsToApproveForSpenders)
        let tx = await trader.sendTransaction(txPayload)
        let txReceipt = await gp.waitForTransaction(tx.hash)
        console.log('Balance after:', await gp.getBalance(config.DISPATCHER).then(ethers.utils.formatEther))
        console.log(txReceipt)
    } catch (e) {
        console.log(e)
    }
}

async function simulateTxWithQuery() {
    let client = '0xa2cD5b9D50d19fDFd2F37CbaE0e880F9ce327837'
    let maintanance = '0x103c7BEC38a948b738A430B2b685654dd95bE0A5'
    let tknsToApproveForSpenders = {
        '0xCB859eA579b28e02B87A1FDE08d087ab9dbE5149': [
            '0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48'
        ]
    }
    let txPayload = {
        data: '0x6880608f00000000000000000000000000000000000000000000000000000000000000c0000000000000000000000000000000000000000000000000000000000000022000000000000000000000000000000000000000000000000000000000000002600000000000000000000000000000000000000000000000000000000000000520000000000000000000000000000000000000000000000002396fd17b7110a000000000000000000000000000000000000000000000000002396fd17b7110a0000000000000000000000000000000000000000000000000000000000000000130121835e15703a1a7bab32626d0927d60f90a81d700000000000000000000000000000000000000000000000000000000000000847f2b0c090000000000000000000000007a250d5630b4cf539739df2c5dacb4c659f2488d000000000000000000000000000000000000000000000002396fd17b7110a000000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2000000000000000000000000a0b86991c6218b36c1d19d4a2e9eb0ce3606eb48533da777aedce766ceae696bf90f8541a4ba80eb0000000000000000000000000000000000000000000000000000000000000044ca19ebd900000000000000000000000075c23271661d9d143dcb617222bc4bec783eff340000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000011000000000000000000000000000000000000000000000000000000000000002907a250d5630b4cf539739df2c5dacb4c659f2488d00000000000000000000000000000000000000000000000000000000000000e47ff36ab500000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000080000000000000000000000000d30ce37a6f2424593dabe9b712d235781815445d000000000000000000000000000000000000000000000000000000006061e1620000000000000000000000000000000000000000000000000000000000000002000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2000000000000000000000000a0b86991c6218b36c1d19d4a2e9eb0ce3606eb48a356867fdcea8e71aeaf87805808803806231fdc00000000000000000000000000000000000000000000000000000000000001440dd4ebd9000000000000000000000000a0b86991c6218b36c1d19d4a2e9eb0ce3606eb48000000000000000000000000eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000006061e162000000000000000000000000000000000000000000000000000000000000000100000000000000000000000075c23271661d9d143dcb617222bc4bec783eff340000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000190',
        to: '0xD30Ce37a6F2424593DaBe9b712d235781815445D',
        gasPrice: '0x2e90edd000',
        from: client
    }
    let forkBlock = 11907345
    let unlocked_accounts = [client, maintanance]
    let gp = utils.getForkProvider(forkBlock, {unlocked_accounts})
    let trader = gp.getSigner(client)
    let approver = gp.getSigner(maintanance)
    try {
        console.log('Balance before:', await gp.getBalance(config.DISPATCHER).then(ethers.utils.formatEther))
        await approveForAll(gp, approver, tknsToApproveForSpenders)
        let tx = await trader.sendTransaction(txPayload)
        let txReceipt = await gp.waitForTransaction(tx.hash)
        console.log('Balance after:', await gp.getBalance(config.DISPATCHER).then(ethers.utils.formatEther))
        console.log(txReceipt)
    } catch (e) {
        console.log(e)
    }
}

async function executeCurrentArb() {
    let blockNumber = await provider.getBlockNumber()
    await arbbot.init(provider, signer)
    await arbbot.handleUpdate(blockNumber)
}

async function simulatePastArb() {
    // https://etherscan.io/tx/0xb1a33314e0cebaef84b04d81dc7583d08b9702a3037f5dd44340252d8d66b5d5
    
}

executeCurrentArb()